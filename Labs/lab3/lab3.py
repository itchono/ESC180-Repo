import utilities


def rotate_90_degrees(image_array, direction=1):
    '''
    (list<image>, int) -> list<image>
    
    rotate_90_degrees takes in a list of length h (number of rows) with sublists of length w (number of columns)
    and returns a list with the same dimensions representing the image rotated 90 degrees
    either clockwise (1) or anticlockwise (-1).
    
    >>> rotate_90_degrees([[0, 0, 1],[0, 0, 1],[0, 0, 1]], 1)
    [[0,0,0], [0,0,0], [1,1,1]]
    '''

    (w, h) = (len(image_array[0]), len(image_array))
    # determine width and height of incoming image

    output_array = [[0] * h for i in range(w)]
    # invert width and height = w lists of length h
    
    # process row by row
    for y in range(0, h):
        for x in range(0, w):
            # determine direction of rotation
            if direction == -1:
                output_array[(w - 1) - x][y] = image_array[y][x]
                # remap each pixel to a rotated image CCW
            else:
                output_array[x][y] = image_array[(h - 1) - y][x]
                # remap each pixel to a rotated image CW

    return output_array


def invert_grayscale(image_array):
    '''
    (list<image, grayscale>) -> list<image, grayscale>

    invert_grayscale takes in a list representing a *grayscale image*
    and returns it with all pixels inverted in colour

    See spec doc for example
    '''
    (w, h) = (len(image_array[0]), len(image_array))
    # determine width and height of incoming image

    output_array = [[0] * w for i in range(h)]
    # create empty output template

    for y in range(0, h):
        for x in range(0, w):
            output_array[y][x] = 255 - int(image_array[y][x])
    return output_array


def flip_image(image_array, axis=0):
    '''
    (list<image>, int) -> list<image>

    flip_image takes in a list with the same format as above
    and returns a list with the same dimensions representing the image flipped either
    vertically (1),  horizontally (0), or both (-1)

    >>> flip_image([[0, 0, 1],[0, 0, 1],[0, 0, 1]], 0)
    [[1,0,0], [1,0,0], [1,0,0]]
    '''
    # axis = -1 (along x = y), 0 along y, 1 along x
    
    # New constraint: square image

    (w, h) = (len(image_array[0]), len(image_array))
    # determine width and height of incoming image

    output_array = [[0] * w for i in range(h)]
    # create empty output template
    for y in range(0, h):
        for x in range(0, w):
            # determine axis of reflection
            if axis == -1:
                output_array[(w-1)-x][(h-1)-y] = image_array[y][x] # will work for a square image only
            elif axis == 1:
                output_array[(h - 1) - y][x] = image_array[y][x]
            else:
                output_array[y][(w - 1) - x] = image_array[y][x]

    return output_array


def crop(image_array, direction, n_pixels):
    '''
    (list<image>, string, int) -> list<image>

    crop takes in a list with the same format as above
    and returns a list with the the image cropped according to
    a direction (‘left’/‘right’/‘up’/‘down’) by n pixels

    >>> crop([[0, 0, 1],[0, 0, 1],[0, 0, 1]], 'left', 1)
    [[0,0], [0,0], [0,0]]
    '''

    (w, h) = (len(image_array[0]), len(image_array))
    # determine width and height of incoming image

    # respecifying params for output array
    if direction == 'left' or direction == 'right':
        w -= n_pixels
    else:
        h -= n_pixels

    output_array = [[0] * w for i in range(h)]
    # create empty output template

    for y in range(0, h):
        for x in range(0, w):
            if direction == 'left':
                output_array[y][x] = image_array[y][x + n_pixels]
            elif direction == 'up':
                output_array[y][x] = image_array[y + n_pixels][x]
            else:
                output_array[y][x] = image_array[y][x]

    return output_array


def rgb_to_grayscale(rgb_image_array):
    '''
    (list<image>) -> list<image, grayscale>

    rgb_to_grayscale converts the given RGB image to a Grayscale image using the formula
    𝑔𝑟𝑎𝑦 = 0.2989 ∗ 𝑟 + 0.5870 ∗ 𝑔 + 0.1140 ∗ b

    See spec doc for examples
    '''

    (w, h) = (len(rgb_image_array[0]), len(rgb_image_array))
    # determine width and height of incoming image

    output_array = [[0] * w for i in range(h)]
    # create empty output template

    for y in range(0, h):
        for x in range(0, w):
            output_array[y][x] = 0.2989 * rgb_image_array[y][x][0] + 0.5870 * rgb_image_array[y][x][1] + \
                                 0.1140 * rgb_image_array[y][x][2]

    return output_array


def invert_rgb(image_array):
    '''
    (list<image, grayscale>) -> list<image, grayscale>

    invert_rgb takes in a list representing an rgb image
    and returns it with all pixels inverted in colour

    See spec doc for example
    '''
    (w, h) = (len(image_array[0]), len(image_array))
    # determine width and height of incoming image

    output_array = [[[0] * 3 for j in range(w)] for i in range(h)]
    # create empty output template in rgb pixel format for faster operation

    for y in range(0, h):
        for x in range(0, w):
            for c in range(0, 3):
                # loop 3 times for each colour channel
                output_array[y][x][c] = 255 - int(image_array[y][x][c])
    return output_array


def histogram_equalization(img_array):
    '''
    (list<image>) -> list<image>
    
    histogram_equalization takes in an image list of a grayscale image and equalizes it using a histogram.
    
    See spec doc for examples
    '''
    
    (w, h) = (len(img_array[0]), len(img_array))
    # determine width and height of incoming image

    output_array = [[0] * w for i in range(h)]
    # create empty output template
    
    grays = [0]*256
    # create frequency matrix for image
    
    for y in range(0, h):
        for x in range(0, w):
            grays[int(img_array[y][x])] += 1
            # count frequency of grays
 
    cumulative_sum = [0]*256
    
    for i in range(0, 256):
        # create cumulative sum
        cumulative_sum[i] = cumulative_sum[i-1] + grays[i]
        
    for i in range(0, 256):
        # normalize from 0 to 255
        cumulative_sum[i] /= ((w*h)/255)
        
    for y in range(0, h):
        for x in range(0, w):
            output_array[y][x] = cumulative_sum[int(img_array[y][x])]
            # apply filter
    
    return output_array


if (__name__ == "__main__"):
    img = [[[130, 89, 93], [115, 74, 78], [102, 60, 64], [96, 54, 58], [94, 51, 58], [90, 49, 55], [92, 51, 57], [97, 58, 63], [96, 59, 66], [98, 63, 69], [103, 72, 77], [109, 82, 87], [107, 85, 88], [102, 82, 84], [100, 81, 83], [101, 85, 86], [105, 82, 92], [115, 94, 103], [112, 91, 100], [105, 84, 93], [120, 99, 108], [144, 124, 133], [170, 151, 157], [190, 173, 179], [202, 185, 191], [213, 198, 203], [211, 196, 199], [204, 189, 192], [205, 193, 195], [207, 195, 197], [210, 198, 200], [219, 207, 209], [225, 205, 204], [222, 204, 202], [226, 208, 206], [232, 214, 212], [229, 211, 209]], [[109, 68, 72], [103, 61, 65], [100, 58, 62], [105, 63, 67], [110, 67, 74], [111, 70, 76], [114, 73, 79], [119, 80, 85], [126, 89, 96], [121, 89, 94], [115, 84, 89], [105, 78, 83], [96, 74, 77], [92, 72, 74], [89, 70, 72], [86, 70, 71], [72, 55, 63], [78, 61, 69], [76, 59, 67], [80, 63, 71], [96, 79, 87], [106, 89, 97], [111, 94, 100], [120, 103, 109], [155, 138, 144], [178, 161, 167], [195, 179, 182], [209, 190, 194], [224, 205, 209], [225, 206, 210], [217, 198, 202], [217, 198, 202], [221, 201, 200], [221, 201, 200], [225, 205, 204], [228, 208, 207], [225, 207, 205]], [[116, 74, 78], [113, 71, 75], [114, 72, 76], [119, 77, 81], [123, 80, 87], [122, 79, 86], [120, 79, 85], [121, 82, 87], [113, 78, 84], [110, 78, 83], [97, 68, 72], [78, 53, 57], [67, 47, 49], [66, 47, 49], [59, 43, 44], [50, 36, 36], [36, 29, 36], [37, 30, 37], [44, 34, 42], [66, 56, 64], [91, 80, 86], [88, 75, 82], [75, 60, 67], [74, 57, 63], [95, 76, 82], [118, 97, 102], [137, 114, 120], [159, 134, 140], [189, 162, 167], [209, 182, 187], [219, 190, 195], [227, 198, 203], [217, 193, 193], [221, 197, 197], [224, 200, 200], [223, 199, 199], [222, 201, 200]], [[135, 90, 95], [132, 87, 92], [128, 83, 88], [125, 80, 85], [119, 76, 83], [116, 73, 80], [112, 71, 77], [111, 72, 77], [116, 81, 87], [117, 86, 91], [107, 81, 84], [87, 65, 68], [78, 59, 61], [77, 61, 62], [67, 53, 53], [49, 37, 37], [20, 23, 28], [21, 22, 27], [33, 34, 39], [70, 68, 73], [102, 97, 103], [96, 87, 92], [79, 66, 73], [82, 65, 71], [79, 58, 65], [95, 70, 76], [102, 72, 80], [112, 79, 86], [140, 105, 112], [169, 132, 139], [195, 155, 163], [216, 176, 184], [208, 180, 179], [219, 191, 190], [223, 195, 194], [218, 190, 189], [217, 189, 188]], [[125, 80, 85], [122, 77, 82], [115, 70, 75], [108, 63, 68], [106, 61, 68], [108, 65, 72], [112, 71, 77], [114, 75, 80], [119, 84, 90], [121, 90, 95], [111, 85, 88], [90, 68, 71], [80, 61, 63], [78, 64, 64], [69, 57, 57], [53, 43, 42], [32, 41, 46], [29, 38, 43], [39, 46, 52], [73, 76, 81], [99, 98, 104], [92, 87, 93], [84, 73, 79], [98, 81, 87], [111, 88, 96], [124, 97, 104], [122, 89, 96], [115, 78, 85], [122, 81, 89], [134, 89, 96], [147, 100, 108], [166, 116, 125], [182, 148, 147], [199, 168, 166], [214, 183, 181], [215, 184, 182], [213, 182, 180]], [[113, 66, 72], [111, 64, 70], [105, 58, 64], [97, 50, 56], [97, 52, 59], [105, 62, 69], [115, 74, 80], [120, 81, 86], [135, 100, 106], [134, 103, 108], [122, 97, 100], [104, 84, 86], [94, 78, 79], [94, 82, 82], [95, 85, 84], [91, 83, 81], [61, 72, 78], [57, 66, 71], [58, 65, 71], [76, 79, 86], [93, 92, 98], [89, 84, 90], [91, 80, 86], [112, 95, 101], [144, 121, 129], [151, 121, 129], [138, 103, 110], [118, 77, 85], [111, 66, 73], [111, 61, 70], [115, 64, 73], [126, 75, 82], [141, 103, 102], [164, 126, 125], [191, 153, 152], [207, 172, 170], [215, 180, 178]], [[124, 75, 81], [125, 76, 82], [118, 71, 77], [109, 62, 68], [108, 61, 69], [116, 71, 78], [123, 80, 87], [125, 86, 91], [123, 88, 94], [121, 90, 95], [114, 88, 91], [101, 81, 83], [89, 73, 74], [83, 71, 71], [86, 76, 75], [90, 82, 80], [79, 83, 92], [77, 81, 90], [74, 77, 84], [86, 85, 93], [105, 100, 107], [114, 104, 112], [126, 113, 120], [153, 134, 140], [168, 142, 151], [165, 135, 143], [143, 108, 115], [122, 82, 90], [120, 77, 84], [123, 76, 84], [125, 76, 82], [131, 82, 88], [122, 82, 82], [132, 92, 92], [153, 113, 113], [179, 139, 139], [195, 155, 155]], [[137, 88, 94], [141, 92, 98], [139, 90, 96], [131, 82, 88], [126, 79, 87], [132, 87, 94], [136, 93, 100], [136, 95, 101], [142, 105, 112], [139, 108, 113], [137, 111, 114], [127, 105, 108], [109, 90, 92], [89, 75, 75], [83, 73, 72], [89, 79, 78], [80, 74, 86], [81, 75, 87], [81, 73, 84], [97, 87, 98], [124, 112, 122], [148, 132, 142], [169, 152, 160], [196, 175, 182], [190, 164, 173], [186, 156, 164], [166, 135, 141], [154, 119, 125], [159, 123, 127], [160, 121, 126], [150, 109, 113], [145, 104, 108], [133, 92, 90], [124, 83, 81], [125, 84, 82], [144, 103, 101], [160, 119, 117]], [[161, 110, 117], [150, 99, 106], [137, 86, 93], [130, 81, 87], [134, 84, 93], [142, 95, 103], [150, 105, 112], [153, 112, 118], [156, 116, 124], [156, 121, 127], [155, 126, 130], [151, 126, 130], [142, 122, 124], [131, 115, 116], [123, 109, 109], [118, 106, 106], [125, 107, 121], [128, 110, 124], [138, 117, 132], [153, 133, 145], [170, 150, 162], [186, 164, 176], [197, 174, 184], [200, 177, 185], [199, 173, 182], [202, 175, 182], [202, 175, 180], [202, 173, 177], [201, 172, 176], [199, 169, 171], [189, 159, 161], [178, 148, 150], [181, 140, 138], [169, 128, 126], [151, 110, 108], [137, 96, 94], [131, 90, 88]], [[155, 104, 111], [152, 101, 108], [146, 95, 102], [140, 89, 96], [136, 86, 95], [138, 88, 97], [142, 95, 103], [147, 102, 109], [147, 106, 114], [149, 112, 119], [153, 121, 126], [157, 128, 133], [157, 132, 136], [155, 135, 137], [155, 136, 138], [154, 138, 139], [165, 134, 150], [166, 135, 151], [170, 139, 155], [178, 147, 163], [189, 158, 173], [196, 168, 182], [201, 173, 185], [201, 175, 184], [210, 184, 193], [214, 189, 195], [214, 192, 195], [213, 191, 194], [215, 193, 195], [215, 195, 196], [210, 190, 191], [204, 184, 185], [223, 183, 183], [212, 172, 172], [196, 156, 156], [182, 142, 142], [173, 133, 133]], [[150, 99, 106], [154, 103, 110], [157, 106, 113], [153, 102, 109], [145, 94, 103], [140, 89, 98], [141, 91, 100], [143, 96, 104], [143, 97, 107], [144, 103, 111], [146, 109, 116], [148, 115, 122], [150, 121, 126], [152, 125, 130], [156, 131, 135], [157, 135, 138], [173, 132, 150], [172, 133, 151], [174, 135, 153], [179, 142, 159], [183, 149, 163], [188, 156, 169], [189, 159, 171], [188, 161, 170], [207, 181, 190], [211, 188, 194], [214, 193, 198], [214, 195, 199], [215, 199, 200], [220, 204, 205], [222, 208, 208], [221, 207, 207], [238, 203, 201], [232, 197, 195], [223, 188, 186], [216, 181, 179], [212, 177, 175]], [[146, 95, 102], [153, 102, 109], [160, 109, 116], [161, 110, 117], [157, 104, 114], [152, 101, 110], [152, 101, 110], [154, 104, 113], [150, 103, 113], [150, 104, 114], [148, 107, 115], [147, 107, 116], [145, 110, 117], [146, 113, 120], [150, 119, 125], [153, 124, 129], [174, 132, 146], [177, 135, 149], [181, 140, 154], [189, 148, 162], [196, 158, 171], [203, 167, 179], [205, 173, 184], [206, 176, 186], [206, 179, 188], [210, 187, 195], [214, 193, 200], [213, 194, 200], [213, 196, 202], [220, 205, 210], [226, 211, 216], [227, 215, 219], [231, 201, 199], [228, 198, 196], [224, 194, 192], [224, 193, 191], [225, 194, 192]], [[141, 90, 97], [146, 95, 102], [153, 102, 109], [159, 106, 114], [163, 110, 120], [165, 112, 122], [166, 113, 123], [168, 115, 125], [166, 114, 126], [167, 117, 128], [167, 120, 130], [166, 123, 133], [168, 126, 136], [172, 132, 141], [176, 139, 147], [181, 144, 152], [180, 140, 151], [185, 145, 156], [194, 154, 165], [202, 164, 175], [210, 174, 184], [217, 184, 193], [222, 190, 201], [225, 195, 205], [220, 193, 202], [225, 199, 208], [227, 204, 214], [225, 204, 213], [224, 204, 213], [230, 210, 219], [233, 216, 224], [235, 218, 226], [234, 208, 207], [230, 204, 203], [225, 199, 198], [222, 196, 195], [222, 196, 195]], [[135, 84, 91], [138, 87, 94], [145, 94, 101], [153, 100, 108], [159, 106, 116], [168, 112, 123], [173, 117, 128], [175, 119, 130], [177, 123, 136], [179, 125, 138], [183, 131, 143], [186, 136, 148], [187, 141, 152], [191, 148, 158], [198, 155, 165], [201, 159, 169], [189, 154, 160], [194, 159, 165], [200, 167, 174], [208, 175, 182], [214, 181, 188], [219, 188, 196], [224, 193, 201], [226, 196, 206], [229, 199, 209], [232, 204, 216], [235, 207, 219], [232, 206, 219], [232, 206, 219], [235, 209, 222], [235, 208, 223], [231, 207, 221], [228, 208, 207], [224, 204, 203], [219, 199, 198], [218, 197, 196], [219, 198, 197]], [[131, 82, 88], [139, 88, 95], [146, 95, 102], [151, 98, 106], [155, 99, 110], [159, 103, 114], [168, 110, 122], [175, 117, 129], [179, 123, 136], [183, 127, 140], [186, 132, 145], [190, 138, 151], [193, 143, 155], [194, 146, 158], [198, 150, 162], [200, 154, 165], [201, 172, 174], [207, 178, 180], [214, 185, 189], [220, 191, 195], [223, 194, 199], [226, 197, 202], [230, 200, 208], [233, 203, 213], [226, 196, 206], [230, 200, 212], [232, 201, 216], [233, 201, 216], [234, 201, 218], [236, 203, 220], [232, 199, 218], [225, 192, 211], [215, 200, 197], [214, 199, 196], [214, 196, 194], [215, 197, 195], [219, 201, 199]]]

    expected = [[130, 89, 93], [115, 74, 78], [102, 60, 64], [96, 54, 58], [94, 51, 58], [90, 49, 55], [92, 51, 57], [97, 58, 63], [96, 59, 66], [98, 63, 69], [103, 72, 77], [109, 82, 87], [107, 85, 88], [102, 82, 84], [100, 81, 83], [101, 85, 86], [105, 82, 92], [115, 94, 103], [112, 91, 100], [105, 84, 93], [120, 99, 108], [144, 124, 133], [170, 151, 157], [190, 173, 179], [202, 185, 191], [213, 198, 203], [211, 196, 199], [204, 189, 192], [205, 193, 195], [207, 195, 197], [210, 198, 200], [219, 207, 209], [225, 205, 204], [222, 204, 202], [226, 208, 206], [232, 214, 212], [229, 211, 209]], [[109, 68, 72], [103, 61, 65], [100, 58, 62], [105, 63, 67], [110, 67, 74], [111, 70, 76], [114, 73, 79], [119, 80, 85], [126, 89, 96], [121, 89, 94], [115, 84, 89], [105, 78, 83], [96, 74, 77], [92, 72, 74], [89, 70, 72], [86, 70, 71], [72, 55, 63], [78, 61, 69], [76, 59, 67], [80, 63, 71], [96, 79, 87], [106, 89, 97], [111, 94, 100], [120, 103, 109], [155, 138, 144], [178, 161, 167], [195, 179, 182], [209, 190, 194], [224, 205, 209], [225, 206, 210], [217, 198, 202], [217, 198, 202], [221, 201, 200], [221, 201, 200], [225, 205, 204], [228, 208, 207], [225, 207, 205]], [[116, 74, 78], [113, 71, 75], [114, 72, 76], [119, 77, 81], [123, 80, 87], [122, 79, 86], [120, 79, 85], [121, 82, 87], [113, 78, 84], [110, 78, 83], [97, 68, 72], [78, 53, 57], [67, 47, 49], [66, 47, 49], [59, 43, 44], [50, 36, 36], [36, 29, 36], [37, 30, 37], [44, 34, 42], [66, 56, 64], [91, 80, 86], [88, 75, 82], [75, 60, 67], [74, 57, 63], [95, 76, 82], [118, 97, 102], [137, 114, 120], [159, 134, 140], [189, 162, 167], [209, 182, 187], [219, 190, 195], [227, 198, 203], [217, 193, 193], [221, 197, 197], [224, 200, 200], [223, 199, 199], [222, 201, 200]], [[135, 90, 95], [132, 87, 92], [128, 83, 88], [125, 80, 85], [119, 76, 83], [116, 73, 80], [112, 71, 77], [111, 72, 77], [116, 81, 87], [117, 86, 91], [107, 81, 84], [87, 65, 68], [78, 59, 61], [77, 61, 62], [67, 53, 53], [49, 37, 37], [20, 23, 28], [21, 22, 27], [33, 34, 39], [70, 68, 73], [102, 97, 103], [96, 87, 92], [79, 66, 73], [82, 65, 71], [79, 58, 65], [95, 70, 76], [102, 72, 80], [112, 79, 86], [140, 105, 112], [169, 132, 139], [195, 155, 163], [216, 176, 184], [208, 180, 179], [219, 191, 190], [223, 195, 194], [218, 190, 189], [217, 189, 188]], [[125, 80, 85], [122, 77, 82], [115, 70, 75], [108, 63, 68], [106, 61, 68], [108, 65, 72], [112, 71, 77], [114, 75, 80], [119, 84, 90], [121, 90, 95], [111, 85, 88], [90, 68, 71], [80, 61, 63], [78, 64, 64], [69, 57, 57], [53, 43, 42], [32, 41, 46], [29, 38, 43], [39, 46, 52], [73, 76, 81], [99, 98, 104], [92, 87, 93], [84, 73, 79], [98, 81, 87], [111, 88, 96], [124, 97, 104], [122, 89, 96], [115, 78, 85], [122, 81, 89], [134, 89, 96], [147, 100, 108], [166, 116, 125], [182, 148, 147], [199, 168, 166], [214, 183, 181], [215, 184, 182], [213, 182, 180]], [[113, 66, 72], [111, 64, 70], [105, 58, 64], [97, 50, 56], [97, 52, 59], [105, 62, 69], [115, 74, 80], [120, 81, 86], [135, 100, 106], [134, 103, 108], [122, 97, 100], [104, 84, 86], [94, 78, 79], [94, 82, 82], [95, 85, 84], [91, 83, 81], [61, 72, 78], [57, 66, 71], [58, 65, 71], [76, 79, 86], [93, 92, 98], [89, 84, 90], [91, 80, 86], [112, 95, 101], [144, 121, 129], [151, 121, 129], [138, 103, 110], [118, 77, 85], [111, 66, 73], [111, 61, 70], [115, 64, 73], [126, 75, 82], [141, 103, 102], [164, 126, 125], [191, 153, 152], [207, 172, 170], [215, 180, 178]], [[124, 75, 81], [125, 76, 82], [118, 71, 77], [109, 62, 68], [108, 61, 69], [116, 71, 78], [123, 80, 87], [125, 86, 91], [123, 88, 94], [121, 90, 95], [114, 88, 91], [101, 81, 83], [89, 73, 74], [83, 71, 71], [86, 76, 75], [90, 82, 80], [79, 83, 92], [77, 81, 90], [74, 77, 84], [86, 85, 93], [105, 100, 107], [114, 104, 112], [126, 113, 120], [153, 134, 140], [168, 142, 151], [165, 135, 143], [143, 108, 115], [122, 82, 90], [120, 77, 84], [123, 76, 84], [125, 76, 82], [131, 82, 88], [122, 82, 82], [132, 92, 92], [153, 113, 113], [179, 139, 139], [195, 155, 155]], [[137, 88, 94], [141, 92, 98], [139, 90, 96], [131, 82, 88], [126, 79, 87], [132, 87, 94], [136, 93, 100], [136, 95, 101], [142, 105, 112], [139, 108, 113], [137, 111, 114], [127, 105, 108], [109, 90, 92], [89, 75, 75], [83, 73, 72], [89, 79, 78], [80, 74, 86], [81, 75, 87], [81, 73, 84], [97, 87, 98], [124, 112, 122], [148, 132, 142], [169, 152, 160], [196, 175, 182], [190, 164, 173], [186, 156, 164], [166, 135, 141], [154, 119, 125], [159, 123, 127], [160, 121, 126], [150, 109, 113], [145, 104, 108], [133, 92, 90], [124, 83, 81], [125, 84, 82], [144, 103, 101], [160, 119, 117]]
    utilities.write_image(img, 'square.png')
    utilities.write_image(crop(img,'down', 7), 'cropped.png')
    utilities.write_image(expected, 'expected.png')
